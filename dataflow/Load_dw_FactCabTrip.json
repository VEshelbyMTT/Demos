{
	"name": "Load_dw_FactCabTrip",
	"properties": {
		"folder": {
			"name": "NYC Data Transformation"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadFromStageYellow"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadFromStageGreen"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimVendor"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimRate"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimLocationPU"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimTripType"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimPaymentType"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimLocationDO"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "GetMaxCabTripKey"
				},
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "ReadDimCabType"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Synapse_DataFlow",
						"type": "DatasetReference"
					},
					"name": "InsertIntodwFactCabTrip"
				}
			],
			"transformations": [
				{
					"name": "UnionYellowandGreen"
				},
				{
					"name": "JoinMaxValueCabTripKey"
				},
				{
					"name": "GenerateCabTripKey"
				},
				{
					"name": "GenerateCabTripKeyDefault"
				},
				{
					"name": "GetVendorKey"
				},
				{
					"name": "GetRateKey"
				},
				{
					"name": "GetPULocationKey"
				},
				{
					"name": "GetDOLocationKey"
				},
				{
					"name": "GetDimTripType"
				},
				{
					"name": "GetPaymentType"
				},
				{
					"name": "VerifyInsert"
				},
				{
					"name": "GetDimCabType"
				}
			],
			"script": "source(output(\n\t\tVendorID as integer,\n\t\tCabTypeID as integer,\n\t\tLpepPickupDatetime as timestamp,\n\t\tLpepDropoffDatetime as timestamp,\n\t\tStoreAndFwdFlag as string,\n\t\tRatecodeID as integer,\n\t\tPULocationID as integer,\n\t\tDOLocationID as integer,\n\t\tPassengerCount as integer,\n\t\tTripDistance as decimal(10,2),\n\t\tFareAmount as decimal(10,2),\n\t\tExtra as decimal(10,2),\n\t\tMtaTax as decimal(10,2),\n\t\tTipAmount as decimal(10,2),\n\t\tTollsAmount as decimal(10,2),\n\t\tImprovementSurcharge as decimal(10,2),\n\t\tTotalAmount as decimal(10,2),\n\t\tPaymentoType as integer,\n\t\tTripType as integer,\n\t\tCongestionSurcharge as decimal(10,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT\\n    CONVERT(INT,VendorID)                           AS VendorID,\\n    1                                               AS CabTypeID,\\n    CONVERT(DATETIME,lpep_pickup_datetime)          AS LpepPickupDatetime,\\n    CONVERT(DATETIME,lpep_dropoff_datetime)         AS LpepDropoffDatetime,\\n    store_and_fwd_flag                              AS StoreAndFwdFlag,\\n    CONVERT(INT,RatecodeID)                         AS RatecodeID,\\n    CONVERT(INT,PULocationID)                       AS PULocationID,\\n    CONVERT(INT,DOLocationID)                       AS DOLocationID,\\n    CONVERT(INT,passenger_count)                    AS PassengerCount,\\n    CONVERT(DECIMAL(10,2),trip_distance)            AS TripDistance,\\n    CONVERT(DECIMAL(10,2),fare_amount)              AS FareAmount,\\n    CONVERT(DECIMAL(10,2),extra)                    AS Extra,\\n    CONVERT(DECIMAL(10,2),mta_tax)                  AS MtaTax,\\n    CONVERT(DECIMAL(10,2),tip_amount)               AS TipAmount,\\n    CONVERT(DECIMAL(10,2),tolls_amount)             AS TollsAmount,\\n    CONVERT(DECIMAL(10,2),CAST(NULLIF(improvement_surcharge,\\'\\') AS DECIMAL(10,2))) AS improvement_surcharge,\\n    CONVERT(DECIMAL(10,2),total_amount)             AS TotalAmount,\\n    CONVERT(INT,payment_type)                       AS PaymentoType,\\n    1                                               AS TripType,\\n    CONVERT(DECIMAL(10,2),CAST(NULLIF(congestion_surcharge,\\'\\') AS DECIMAL(10,2)))  AS CongestionSurcharge\\nFROM\\n    stage.NYCCabTrip_Yellow',\n\tformat: 'query',\n\tstaged: false) ~> ReadFromStageYellow\nsource(output(\n\t\tVendorID as integer,\n\t\tCabTypeID as integer,\n\t\tLpepPickupDatetime as timestamp,\n\t\tLpepDropoffDatetime as timestamp,\n\t\tStoreAndFwdFlag as string,\n\t\tRatecodeID as integer,\n\t\tPULocationID as integer,\n\t\tDOLocationID as integer,\n\t\tPassengerCount as integer,\n\t\tTripDistance as decimal(10,2),\n\t\tFareAmount as decimal(10,2),\n\t\tExtra as decimal(10,2),\n\t\tMtaTax as decimal(10,2),\n\t\tTipAmount as decimal(10,2),\n\t\tTollsAmount as decimal(10,2),\n\t\tImprovementSurcharge as decimal(10,2),\n\t\tTotalAmount as decimal(10,2),\n\t\tPaymentoType as integer,\n\t\tTripType as integer,\n\t\tCongestionSurcharge as decimal(10,2)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT\\n    CONVERT(INT,VendorID)                           AS VendorID,\\n    2                                               AS CabTypeID,\\n    CONVERT(DATETIME,lpep_pickup_datetime)          AS LpepPickupDatetime,\\n    CONVERT(DATETIME,lpep_dropoff_datetime)         AS LpepDropoffDatetime,\\n    store_and_fwd_flag                              AS StoreAndFwdFlag,\\n    CONVERT(INT,RatecodeID)                         AS RatecodeID,\\n    CONVERT(INT,PULocationID)                       AS PULocationID,\\n    CONVERT(INT,DOLocationID)                       AS DOLocationID,\\n    CONVERT(INT,passenger_count)                    AS PassengerCount,\\n    CONVERT(DECIMAL(10,2),trip_distance)            AS TripDistance,\\n    CONVERT(DECIMAL(10,2),fare_amount)              AS FareAmount,\\n    CONVERT(DECIMAL(10,2),extra)                    AS Extra,\\n    CONVERT(DECIMAL(10,2),mta_tax)                  AS MtaTax,\\n    CONVERT(DECIMAL(10,2),tip_amount)               AS TipAmount,\\n    CONVERT(DECIMAL(10,2),tolls_amount)             AS TollsAmount,\\n    CONVERT(DECIMAL(10,2),CAST(NULLIF(improvement_surcharge,\\'\\') AS DECIMAL(10,2))) AS improvement_surcharge,\\n    CONVERT(DECIMAL(10,2),total_amount)             AS TotalAmount,\\n    CONVERT(INT,payment_type)                       AS PaymentoType,\\n    CONVERT(INT,trip_type)                          AS TripType,\\n    CONVERT(DECIMAL(10,2),CAST(NULLIF(congestion_surcharge,\\'\\') AS DECIMAL(10,2)))  AS CongestionSurcharge\\nFROM\\n    stage.NYCCabTrip_Green',\n\tformat: 'query',\n\tstaged: false) ~> ReadFromStageGreen\nsource(output(\n\t\tVendorKey as integer,\n\t\tVendorID as integer,\n\t\tVendorDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimVendor',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimVendor\nsource(output(\n\t\tRateKey as integer,\n\t\tRateID as integer,\n\t\tRateDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimRate WHERE RateID IS NOT NULL',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimRate\nsource(output(\n\t\tLocationKey as integer,\n\t\tLocationID as integer,\n\t\tBorough as string,\n\t\tZone as string,\n\t\tservice_zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimLocation',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimLocationPU\nsource(output(\n\t\tTripTypeKey as integer,\n\t\tTripTypeID as integer,\n\t\tTripTypeDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimTripType',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimTripType\nsource(output(\n\t\tPaymentTypeKey as integer,\n\t\tPaymentTypeID as integer,\n\t\tPaymentTypeDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimPaymentType',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimPaymentType\nsource(output(\n\t\tLocationKey as integer,\n\t\tLocationID as integer,\n\t\tBorough as string,\n\t\tZone as string,\n\t\tservice_zone as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM dw.DimLocation',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimLocationDO\nsource(output(\n\t\tMaxCabTripKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxCabTripKey = ISNULL(MAX(CabTripKey),0) from [dw].[FactCabTrip]',\n\tformat: 'query',\n\tstaged: false) ~> GetMaxCabTripKey\nsource(output(\n\t\tCabTypeKey as integer,\n\t\tCabTYpeID as integer,\n\t\tCabTypeDescription as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM [dw].[DimCabType]',\n\tformat: 'query',\n\tstaged: false) ~> ReadDimCabType\nReadFromStageYellow, ReadFromStageGreen union(byName: true)~> UnionYellowandGreen\nUnionYellowandGreen, GetMaxCabTripKey join(1 == 1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMaxValueCabTripKey\nJoinMaxValueCabTripKey keyGenerate(output(CreateCabTripKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> GenerateCabTripKey\nGenerateCabTripKey derive(CabTripKey = CreateCabTripKey + MaxCabTripKey) ~> GenerateCabTripKeyDefault\nGetDOLocationKey, ReadDimVendor lookup(UnionYellowandGreen@VendorID == ReadDimVendor@VendorID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetVendorKey\nGetVendorKey, ReadDimRate lookup(RatecodeID == RateID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetRateKey\nGenerateCabTripKeyDefault, ReadDimLocationPU lookup(PULocationID == LocationID,\n\tmultiple: false,\n\tpickup: 'any',\n\tpartitionBy('hash', 300,\n\t\tPULocationID\n\t),\n\tbroadcast: 'auto')~> GetPULocationKey\nGetPULocationKey, ReadDimLocationDO lookup(DOLocationID == ReadDimLocationDO@LocationID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetDOLocationKey\nGetRateKey, ReadDimTripType lookup(TripType == TripTypeID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetDimTripType\nGetDimTripType, ReadDimPaymentType lookup(PaymentoType == PaymentTypeID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetPaymentType\nGetDimCabType alterRow(insertIf(1==1)) ~> VerifyInsert\nGetPaymentType, ReadDimCabType lookup(UnionYellowandGreen@CabTypeID == ReadDimCabType@CabTYpeID,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> GetDimCabType\nVerifyInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tCabTripKey as integer,\n\t\tVendorKey as integer,\n\t\tCabTypeKey as integer,\n\t\tLpepPickupDatetime as timestamp,\n\t\tLpepDropoffDatetime as timestamp,\n\t\tStoreAndFwdFlag as string,\n\t\tRateKey as integer,\n\t\tPULocationKey as integer,\n\t\tDOLocationKey as integer,\n\t\tTripTypeKey as integer,\n\t\tPaymentTypeKey as integer,\n\t\tPassengerCount as integer,\n\t\tTripDistance as decimal(10,2),\n\t\tFareAmount as decimal(10,2),\n\t\tExtra as decimal(10,2),\n\t\tMtaTax as decimal(10,2),\n\t\tTipAmount as decimal(10,2),\n\t\tTollsAmount as decimal(10,2),\n\t\tImprovementSurcharge as decimal(10,2),\n\t\tTotalAmount as decimal(10,2)\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tpreSQLs:['TRUNCATE TABLE dw.FactCabTrip'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tsaveOrder: 1,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCabTripKey,\n\t\tVendorKey,\n\t\tCabTypeKey,\n\t\tLpepPickupDatetime,\n\t\tLpepDropoffDatetime,\n\t\tStoreAndFwdFlag,\n\t\tRateKey,\n\t\tPULocationKey = ReadDimLocationPU@LocationKey,\n\t\tDOLocationKey = ReadDimLocationDO@LocationKey,\n\t\tTripTypeKey,\n\t\tPaymentTypeKey,\n\t\tPassengerCount,\n\t\tTripDistance,\n\t\tFareAmount,\n\t\tExtra,\n\t\tMtaTax,\n\t\tTipAmount,\n\t\tTollsAmount,\n\t\tImprovementSurcharge,\n\t\tTotalAmount\n\t)) ~> InsertIntodwFactCabTrip"
		}
	}
}